package pmelnik.local.sorting;

/**
 * Алгос работает по принципу "разделяй и властвуй"
 * Выбор опорного элемента (pivot):
 * обычно выбирается последний, первый, средний или случайный элемент массива.
 * Разделение (partition) - перераспределение элементов так, чтобы:
 *  - Все элементы меньше опорного оказались слева от него
 *  - Все элементы больше опорного - справа от него
 * Рекурсивная сортировка:
 * алгоритм рекурсивно применяется к левой и правой частям массива.
 * Процесс разделения:
 * Используется два указателя: i (индекс меньшего элемента) и j (текущий элемент)
 * При обходе массива элементы меньше опорного перемещаются влево
 * В конце опорный элемент ставится на свою окончательную позицию
 * Оценка сложности
 * Временная сложность:
 * Лучший случай: O(n log n) - когда опорный элемент всегда делит массив пополам
 * Средний случай: O(n log n) - в среднем работает очень эффективно
 * Худший случай: O(n²) - когда массив уже отсортирован,
 * а мы всегда выбираем крайний элемент как опорный
 * Пространственная сложность:
 * Лучший/Средний случай: O(log n) - из-за рекурсивных вызовов (глубина стека)
 * Худший случай: O(n) - при несбалансированном разделении
 * Особенности
 * Нестабильная сортировка (может менять порядок одинаковых элементов)
 * In-place алгоритм (не требует дополнительной памяти для самого массива)
 * На практике один из самых быстрых алгоритмов сортировки
 */
public class QuickSort {

    public void quickSort(int[] array, int low, int high) {
        if (low < high) {
            //индекс опорного элемента
            int pivotIndex = partition(array, low, high);

            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }

    private int partition(int[] array, int low, int high) {
        //выбираем последний элемент как опорный
        int pivot = array[high];
        //индекс меньшего элемента (правильная позиция опорного элемента)
        int i = low - 1;

        for (int j = low; j < high; j++) {
            //если текущий элемент меньше или равен опорному
            if (array[j] <= pivot) {
                i++;
                //меняем элементы местами
                swap(array, i, j);
            }
        }
        swap(array, i + 1, high);
        return i + 1;
    }

    private void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

}
