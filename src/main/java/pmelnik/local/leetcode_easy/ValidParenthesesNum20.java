package pmelnik.local.leetcode_easy;

import java.util.Stack;

/**
 * Алгоритм решения
 * Создаем стек для хранения открывающих скобок
 * Проходим по каждому символу строки:
 * Если символ - открывающая скобка, кладем в стек
 * Если символ - закрывающая скобка:
 * Если стек пуст → невалидно
 * Если последняя открывающая скобка не соответствует текущей закрывающей → невалидно
 * Если соответствует → удаляем открывающую скобку из стека
 * В конце стек должен быть пустым
 * ---
 * Анализ сложности
 * Время: O(n), где n - длина строки. Каждый символ обрабатывается один раз.
 * Память: O(n) в худшем случае (когда все скобки открывающие).
 */
public class ValidParenthesesNum20 {

    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for (char c : s.toCharArray()) {
            // Если открывающая скобка - кладем в стек
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            }
            // Если закрывающая скобка
            else {
                // Если стек пуст - невалидно
                if (stack.isEmpty()) {
                    return false;
                }

                // Достаем последнюю открывающую скобку
                char lastOpen = stack.pop();

                // Проверяем соответствие скобок
                if ((c == ')' && lastOpen != '(') ||
                        (c == '}' && lastOpen != '{') ||
                        (c == ']' && lastOpen != '[')) {
                    return false;
                }
            }
        }

        // В конце стек должен быть пустым
        return stack.isEmpty();
    }

}
