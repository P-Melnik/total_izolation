package pmelnik.local.search;

/**
 * Принцип работы
 * Бинарный поиск работает только на отсортированных массивах
 * и использует стратегию "разделяй и властвуй":
 * Начальные границы - устанавливаем левую границу на начало массива, правую - на конец
 * Нахождение середины - вычисляем средний элемент между границами
 * Сравнение:
 * Если средний элемент равен целевому - поиск завершен
 * Если целевой элемент больше среднего - отбрасываем левую половину
 * Если целевой элемент меньше среднего - отбрасываем правую половину
 * Повторение - продолжаем процесс с новой областью поиска
 * -----
 * Оценка сложности
 * Временная сложность:
 * Лучший случай: O(1) - элемент находится точно в середине массива
 * Средний случай: O(log n) - элемент находится после нескольких делений
 * Худший случай: O(log n) - элемент находится на краю или отсутствует
 * Пространственная сложность:
 * Итеративная версия: O(1) - использует только несколько переменных
 * Рекурсивная версия: O(log n) - из-за глубины рекурсивных вызовов
 * -----
 * Особенности
 * Требует предварительной сортировки массива
 * Очень эффективен для больших массивов
 * Каждая итерация уменьшает область поиска вдвое
 * В 1000 раз быстрее линейного поиска для массива из 1 млн элементов
 * Важное замечание:
 * Формула mid = left + (right - left) / 2 предотвращает возможное переполнение,
 * которое может случиться при использовании (left + right) / 2 для очень больших массивов.
 */
public class BinarySearch {


    public int binarySearch(int[] array, int target) {
        int left = 0;
        int right = array.length - 1;

        while (left <= right) {

            int mid = left + (right - left) / 2;

            System.out.println("Диапазон поиска: [" + left + ", " + right +
                    "], средний элемент: " + array[mid]);

            if (array[mid] == target) {
                return mid;
            }

            if (array[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }

        return -1;
    }

    public static int binarySearchRecursive(int[] arr, int target, int left, int right) {
        if (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            if (arr[mid] < target) {
                return binarySearchRecursive(arr, target, mid + 1, right);
            } else {
                return binarySearchRecursive(arr, target, left, mid - 1);
            }
        }

        return -1;
    }

}
