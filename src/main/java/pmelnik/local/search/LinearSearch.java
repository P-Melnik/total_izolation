package pmelnik.local.search;

/**
 * Линейный поиск - это самый простой алгоритм поиска:
 * Последовательная проверка - алгоритм проходит по каждому элементу массива по порядку
 * Сравнение - на каждом шаге сравнивает текущий элемент с искомым значением
 * Результат:
 * Если элементы равны - возвращает индекс текущего элемента
 * Если дошел до конца массива и не нашел - возвращает -1
 * ---
 * Оценка сложности
 * Временная сложность:
 * Лучший случай: O(1) - элемент находится на первой позиции
 * Средний случай: O(n) - элемент находится в середине массива
 * Худший случай: O(n) - элемент находится в конце или отсутствует
 * Пространственная сложность:
 * Все версии: O(1) - использует только несколько переменных
 * ---
 * Особенности
 * Работает на любых массивах (отсортированных и неотсортированных)
 * Простая реализация - легко понять и написать
 * Универсальность - работает с любыми типами данных
 * Неэффективен для больших массивов - для 1 млн элементов в худшем случае
 * сделает 1 млн сравнений
 * Подходит для небольших массивов или когда массив не отсортирован
 * ---
 * Когда использовать?
 * Когда массив небольшой
 * Когда массив не отсортирован и сортировка нецелесообразна
 * Для поиска всех вхождений элемента
 * Как базовая реализация для более сложных алгоритмов
 */
public class LinearSearch {

    public int search(int[] array, int target) {
        for (int i = 0; i < array.length; i++) {

            if (array[i] == target) {
                return i;
            }
        }
        return -1;
    }

    public int[] searchAllAppearances(int[] array, int target) {
        int count = 0;

        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                count++;
            }
        }

        int[] indices = new int[count];
        int index = 0;

        for (int i = 0; i < array.length; i++) {
            if (array[i] == target) {
                indices[index++] = i;
            }
        }

        return indices;
    }

}
